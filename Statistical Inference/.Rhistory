# Data Example
library(UsingR)
# Example: What's the probability of senven a family has 8 children and 7 of them are girls with no twins, if each gender has an independt 50% probability for each birth.
choose(8, 7) * 0.5^8 + choose(8, 8) * 0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
# Example: 95th percentile
qnorm(0.95, mean = 0. sd = 1)
# Example: 95th percentile
qnorm(0.95, mean = 0. std = 1)
# Example: 95th percentile
qnorm(0.95, mean = 0. sd = 1)
# Example: 95th percentile
qnorm(0.95, mean = 0 sd = 1)
# Example: 95th percentile
qnorm(0.95, mean = 0, sd = 1)
# Example: 95th percentile
qnorm(0.95, mean = 5, sd = 2)
# Example: 95th percentile
qnorm(0.95, mean = 5, sd = 2)
5 + 2 * 1.645
# Example: 95th percentile
qnorm(0.95, mean = 5, sd = 2)
5 + 2 * 1.645
qnorm(0.95, mean = 0, sd = 1, lower.tail = FALSE) # lower.tail = FALSE means we want the upper part of the distribution
# Example: 95th percentile
qnorm(0.95, mean = 5, sd = 2)
5 + 2 * 1.645
qnorm(0.05, mean = 0, sd = 1, lower.tail = FALSE) # lower.tail = FALSE means we want the upper part of the distribution
# assume a popilation with a mean of 1020, std 50, what's the porbability of getting a 1160
pnorm(1160, mean = 1020, sd = 50, lower.tail = FALSE)
# what number would represent one where 75% of the population would be less
qnorm(0.75, mean = 1020, sd = 50)
# If watching the bus stop for 4 hours, what's the probability that 3 or 4 people show up for the whole time?
ppois(3, lambda = 2.5 * 4)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500 * 0.01)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500 * 0.01)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500 * 0.01)
# as we collect more and more data, the estimation would be closer to the estimated value
n = 1000
means = cumsum(rnorm(n)) / (1:n) # cumsum: accumulative sum
# as we collect more and more data, the estimation would be closer to the estimated value
n = 1000
means = cumsum(rnorm(n)) / (1:n) # cumsum: accumulative sum
means
# as we collect more and more data, the estimation would be closer to the estimated value
n = 1000
means = cumsum(rnorm(n)) / (1:n) # cumsum: accumulative sum
plot(means)
# example: coin flip
means = cumsum(sample(0:1, n, replace = TRUE)) / (1:n)
plot(means)
# example: coin flip
means = cumsum(sample(0:1, n, replace = TRUE)) / (1:n)
plot(means, xlab = "Number of Obs")
# as we collect more and more data, the estimation would be closer to the estimated value
n = 1000
means = cumsum(rnorm(n)) / (1:n) # cumsum: accumulative sum
plot(means, xlab = "Number of Obs")
# we can see from the plot that, as the number of samples goes up, the mean is becoming closer and closer to its' true value, which is 0.
# as we collect more and more data, the estimation would be closer to the estimated value
n = 1000
means = cumsum(rnorm(n)) / (1:n) # cumsum: accumulative sum
plot(means, xlab = "Number of Obs", ylab = "Cumulative Mean")
# we can see from the plot that, as the number of samples goes up, the mean is becoming closer and closer to its' true value, which is 0.
# example: coin flip
means = cumsum(sample(0:1, n, replace = TRUE)) / (1:n)
plot(means, xlab = "Number of Obs", ylab = "Cumulative Mean")
means = cumsum(sample(1:6, n, replace = TRUE)) / (1:n)
hist(means)
means = cumsum(sample(1:6, 200, replace = TRUE)) / (1:n)
hist(means)
means = cumsum(sample(1:6, 5000, replace = TRUE)) / (1:n)
hist(means)
means = cumsum(sample(1:6, n, replace = TRUE)) / (1:n)
hist(means)
means = cumsum(sample(1:6, 10*n, replace = TRUE)) / (1:10*n)
hist(means)
means = cumsum(sample(1:6, n, replace = TRUE)) / (1:n)
hist(means)
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
coverage = sapply(pvals, function(p) {
phats = rbinom(nosim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
p = seq(0, 1, by = 0.01)
cov = coverage(pvals, p)
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.01)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage)
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage)
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.0001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage)
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.0001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
s = 30
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
s = 10
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
s = 20
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
n = 100
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
n = 100
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
n = 100
pvals = seq(0.1, 0.9, by = 0.05)
num_sim = 1000
#p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
n = 100
pvals = seq(0.1, 0.9, by = 0.001)
num_sim = 1000
#p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
n = 100
pvals = seq(0.1, 0.9, by = 0.0001)
num_sim = 1000
#p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
n = 100
pvals = seq(0.1, 0.9, by = 0.01)
num_sim = 1000
#p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, type = 'l')
n = 100
pvals = seq(0.1, 0.9, by = 0.01)
num_sim = 1000
#p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(coverage, pvals , type = 'l')
n = 100
pvals = seq(0.1, 0.9, by = 0.01)
num_sim = 1000
#p = seq(0, 1, by = 0.001)
coverage = sapply(pvals, function(p) {
phats = rbinom(num_sim, prob = p, size = n) / n
ll = phats - qnorm(0.975) * sqrt(phats * (1 - phats) / n)
ul = phats + qnorm(0.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
plot(pvals, coverage,  type = 'l')
# Say a nuclear pump failed 5 times out of 94.32 dats, give a 95% confidence interval for the failure rate per day.
x = 5
t = 94.32
lambda = 94.32 / 5
rould (lambda + c(1, -1) * qnorm(0.975) * sqrt(lambda / t), 3)
# Say a nuclear pump failed 5 times out of 94.32 dats, give a 95% confidence interval for the failure rate per day.
x = 5
t = 94.32
lambda = 94.32 / 5
round (lambda + c(1, -1) * qnorm(0.975) * sqrt(lambda / t), 3)
# Say a nuclear pump failed 5 times out of 94.32 dats, give a 95% confidence interval for the failure rate per day.
x = 5
t = 94.32
lambda = 5 / 94.32
round (lambda + c(1, -1) * qnorm(0.975) * sqrt(lambda / t), 3)
# Say a nuclear pump failed 5 times out of 94.32 dats, give a 95% confidence interval for the failure rate per day.
x = 5
t = 94.32
lambda = x / t
round (lambda + c(1, -1) * qnorm(0.975) * sqrt(lambda / t), 3)
# Say a nuclear pump failed 5 times out of 94.32 dats, give a 95% confidence interval for the failure rate per day.
x = 5
t = 94.32
lambda = x / t
round (lambda + c(-1, 1) * qnorm(0.975) * sqrt(lambda / t), 3)
poisson.test(x, T = 94.32)&conf
poisson.test(x, T = 94.32)&conf.level
poisson.test(x, T = 94.32, conf.level = 0.95)
n = 100
lambdavals = seq(0.005, 1, by = 0.01)
num_sim = 1000
t = 100
coverage = sapply(lambdavals, function(lambda) {
lhats = rbinom(num_sim, lambda = lambda / t) / t
ll = phats - qnorm(0.975) * sqrt(lhats / t)
ul = phats + qnorm(0.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
n = 100
lambdavals = seq(0.005, 1, by = 0.01)
num_sim = 1000
t = 100
coverage = sapply(lambdavals, function(lambda) {
lhats = rpois(num_sim, lambda = lambda * t) / t
ll = phats - qnorm(0.975) * sqrt(lhats / t)
ul = phats + qnorm(0.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
n = 100
lambdavals = seq(0.005, 1, by = 0.01)
num_sim = 1000
t = 100
coverage = sapply(lambdavals, function(lambda) {
lhats = rpois(num_sim, lambda = lambda * t) / t
ll = lhats - qnorm(0.975) * sqrt(lhats / t)
ul = lhats + qnorm(0.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
plot(pvals, coverage,  type = 'l')
n = 100
lambdavals = seq(0.005, 1, by = 0.01)
num_sim = 1000
t = 100
coverage = sapply(lambdavals, function(lambda) {
lhats = rpois(num_sim, lambda = lambda * t) / t
ll = lhats - qnorm(0.975) * sqrt(lhats / t)
ul = lhats + qnorm(0.975) * sqrt(lhats / t)
mean(ll < lambda & ul > lambda)
})
plot(lambdavals, coverage,  type = 'l')
1.645 * 75 + 1100
1.645 * (75/100) + 1100
1.645 * (75/10) + 1100
1.645 * (75/10) + 1100
choose(5, 4)
1.645 * (75/10) + 1100
choose(5, 4) * (1/2) * 5 + (1/2) * 5
1.645 * (75/10) + 1100
choose(5, 4) * (1/2)^5 + (1/2)^5
ppois(10, labmda = 5, T = 3)
ppois(10, labmda = 5 * 3)
ppois(10, lambda = 5 * 3)
data("sleep")
head(sleep)
g1 = sleep$extra[1:10]
g2 = sleep$extra[11:20]
diff = g2 - g1
diff_mean = mean(diff)
diff_std = sd(diff)
n = 10
mn + c(-1, 1) *qt(0.975, n-1) * diff_std/sqrt(10)
g1 = sleep$extra[1:10]
g2 = sleep$extra[11:20]
diff = g2 - g1
diff_mean = mean(diff)
diff_std = sd(diff)
n = 10
diff_mean + c(-1, 1) *qt(0.975, n-1) * diff_std/sqrt(10)
g1 = sleep$extra[1:10]
g2 = sleep$extra[11:20]
diff = g2 - g1
diff_mean = mean(diff)
diff_std = sd(diff)
n = 10
diff_mean + c(-1, 1) *qt(0.975, n-1) * diff_std/sqrt(10)
t.test(difference)
g1 = sleep$extra[1:10]
g2 = sleep$extra[11:20]
diff = g2 - g1
diff_mean = mean(diff)
diff_std = sd(diff)
n = 10
diff_mean + c(-1, 1) *qt(0.975, n-1) * diff_std/sqrt(10)
t.test(diff)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
install_from_swirl("R Programming")
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Statistical Inference")
swirl()
5 + 7
x = 5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
a <- c(z, 555)
a <- c(z, 555, z)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
raed.csv(path2csv, stringAsFactors = FALSE)
mydf = read.csv(path2csv, stringAsFactors = FALSE)
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("DPLYR")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
crean
cran
select(cran, -time)
-5:20
-(5:20)
slect(cran, -(x:size))
select(cran, -(x:size))
select(cran, -(X:size))
fileter(cran, package == "swirl")
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
cran
cran$ip_id
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran,
| country == "US" | country == "IN")
filter(cran, | country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 = select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
swirl()
33/36
deck
52
1/13
0
3/13
0
3/52
2/52
2/51
qt(0.95, 8)
qt(0.95, 8) * 30 + 1100
qt(0.95, 9) * 30 + 1100
qt(0.95, 8) * 30 + 1100
qt(0.95, 8) #* 30 + 1100
qt(0.975, 8) #* 30 + 1100
qt(0.975, 8) * 30 + 1100
2 / qt(0.975, 8)
qt(0.975, 8)
qt(0.975, 8) / 2
2/qt(0.975, 8)
2/qt(0.95, 8)
2/qt(0.975, 8)
2/qt(0.975, 8) * 3
